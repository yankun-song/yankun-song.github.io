[ { "title": "Common Interview Questions", "url": "/posts/Common_interview_questions/", "categories": "Interviews", "tags": "", "date": "2022-10-10 00:00:00 -0500", "snippet": "自我介绍After graduation from college, I was a materials science researcher. My research focus was mechanical properties simulation, and I published 1 paper and 2 patents.During my study at Columbia University for my master’s degree, I was fascinated by the power of python. After learning some data science stuff, I decided to devote myself to software development.Most recently, I was working as a fullstack engineer and our team was working on an open source product called Contractual. I was mainly responsible for the backend development, like designing REST APIs, designing databases and writing unit tests.Last year, I was a frontend developer intern at Boston Software Group. My main duty was to build a website with React. So I’m familiar with the frontend tech stack, like HTML, CSS and JavaScript.In my work, I have integrated CI/CD pipeline for reduced risk and a smoother path to producation.Recently, I’m getting more experience on AWS, and I’m a AWS certified Cloud Practitioner.In my free time, besides taking care of my cat and turtles, I’m running a close-knit coding community. We do some data structure and algo challenges and pair programming every weekend.To conclude, I believe my skill set, espeically my xxx and xxx knowledge will help me to be a good fit for this position.Git ExperienceLet’s say we have a repository hosted on Github, and it has a main branch. What I will do is to fork it and create a feature branch. I will make my changes on this branchOnce I finish, I would like to merge this feature branch into the main branch. In order to do this, I will submit a PR. Other engineers would review my PR, comment on it, and approve it if they it is good.To make the merge safer, we can add some rules to protect the branch. For example, the deployment must succeed before merging, and we need at least two approvals.CI/CD ExperienceGithub actions is a CI/CD platform and I can give you an example of how I used it.Every time I submit a PR, I would like to guarantee the build is successful and all tests can pass. Then when merging, I also need to build a docker image and push the image to Docker Hub.I created a .yml file in the .github/workflows folder. The file would contain events, jobs, runners, steps and actions.In the .yml file, we have the on section, specifying when we want to run these jobs, like when we push to the main branch or there is a PR to the main branch. We also have the jobs section, where we can set up the workflow. For example, we let it run on Ubuntu, with node version 12/14/16, and some commands to run. If we would like to do some unit tests, then we have npm install and npm run test. If we would like to release it, we can run docker build, and docker push.Github Actions provide a lot of templates,based on various purposes, and they’re pretty handy and helpful.TDDIn TDD, tests are written before we code. We keep coding to make the program pass more tests.I can give you an example of how I used TDD. One of the key features of our app is it first asks user to define their data contract. After that, every time the user test their API, we check if the request follows the data contract.First, I converted the requirements into some unit tests. Let’s say, in the data contract, for the POST request sent to /users, the request body must contain a field username, which is a string; and a field hobbies, which is an array. For example, the app should return an error message if usernameturns out to be a number in the request body. The test should return passed if it is a string.The first time I run the tests, they were expected to return failed for most cases, because no functionality has been added.Then I implemented some functions to check strings. After that, the string tests should all pass, while others still failed.Then I implemented functions to check arrays. After that, more test cases should pass.I did it again and again until all of them got a pass.ContractualContractual Database DesignWhat you read to stay up-to-date?I subscribe to some newsletters and check github trending from time to time. Two newsletters I like most are Quastor and ByteByteGo. One for tech blogs posts, and the other for system design.One interesting thing I’ve learned is how Quora shards their MySQL database. It was my first time to know the concept of database sharding.Sharding is a method of distributing a single dataset across multiple databases. This allows larger datasets to be split into smaller chunks and stored in multiple data nodes, so the total storage capacity of the system can be increased. Other benefits include increased read/write throughput and high availability.However, sharding also have some disadvantages. It introduces additional latency on every query, because the database needs to route a query to the appropriate shard. It is also harder to administrate.Why Data EngineerAt the early stage of my professional career, I don’t want to limit myself to a too specific role. I like coding and solving technical problems, so they are very similar from my side.Since I know both software development and data engineering, I’m open to any role the company needs. There might be some warm up needed at the very beginning, but I’m totally ok with it and I believe that’s not a big deal.SQL vs noSQLSQL must follow predefined schema vertically scalable some relationships between tables (one to one, one to many…) ACID (Atomicity, Consistency, Isolation, Durability) support complex queries, not good for tons of dataNoSQL Dynamic schemas, stored with key-value, document. Good for unstructured or semi-structured data like JSON. horizontally scalable" }, { "title": "Testing notes from William's class", "url": "/posts/wiliam/", "categories": "Testing", "tags": "Selenium", "date": "2022-09-17 00:00:00 -0500", "snippet": "Page ObjectPage object is a design pattern for enhancing test maintenance and reducing code duplication.A page object is an object-oriented class that servers as an interface to a page. The tests use the methods of this page object class when they need to interact with the UI of that page.If the UI changes, the tests themselves don’t need to change, only the code within the page object needs to change.读文件" }, { "title": "GoDaddy Testing Interview Preparation", "url": "/posts/GoDaddy_testing_interview/", "categories": "Interviews", "tags": "", "date": "2022-09-03 00:00:00 -0500", "snippet": "自我介绍Previously, I was working as a fullstack engineer and our team was working on a Postman-like, open source product called Contractual. I was mainly responsible for the backend development, like designing REST APIs, designing databases and writing unit tests with Jest.Last year, I was a frontend developer intern at Boston Software Group. My main duty was to build a website with React. So I’m familiar with the frontend tech stack, like HTML, CSS and JavaScript.I have some hands-on experience using AWS, and I’m a AWS certified Cloud Practitioner.Before being a developer, I had some experience in web scraping and data mining using Python.Recently, I’m doing some Selenium and Cucumber projects, and my past experience helped me a lot. I believe I’m a good fit for this position.如何定位Username/ PasswordSelenium supports several locators such as ID, XPath, CSS, className and tagName.Personally, I prefer to use CSS selectors and XPath.I would open chrome developer tools to inspect the elements. If it has a unique attribute like id or classname, then I can use the CSS selectors. Otherwise, I will check if I can locate its parent or siblings.定时任务In order to run tasks at pre-determined times or intervals, there are several ways.We can write a script, and then schedule cron jobs to execute the script periodically.Or we can create asynchronous tasks with Celery and RabbitMQ.Personally, I think the best approach is to use some existing tools. For example, Amazon has their cloud watch system. Postman Monitor can run a collection of API tests periodically and check its performance and response.If we have not only API tests, but also some other unit tests, we can use Jenkins and create some triggers.Such ways are easier to implement, and can generate reports automatically.Git WorkflowLet’s say we have a repository hosted on Github, and it has a main branch. What I will do is to fork it and create a feature branch. Inside this branch, I will make my changes.Once I think I have finished, I would like to merge this feature branch into the main branch. In order to do this, I will submit a PR. Other engineers would review my PR, comment on it, and approve it if they it is good.To make the merge safer, we can add some rules to protect the branch. For example, the deployment must succeed before merging, and we need at least two approvals.Github ActionsGithub actions is a CI/CD platform and I can give you an example of how I used it.Every time I submit a PR, I would like to guarantee the build is successful and all tests can pass. Then when merging, I also need to build a docker image and push the image to Docker Hub.I created a .yml file in the .github/workflows folder. The file would contain events, jobs, runners, steps and actions.In the .yml file, we have the “on” section, specifying when we want to run these jobs, like when we push to the main branch or there is a PR to the main branch. We also have the “jobs” section, where we can set up the workflow. For example, we let it run on Ubuntu, with node version 12/14/16, and some commands to run. If we would like to do some unit tests, then we have npm install and npm run test. If we would like to release it, we can run docker build, and docker push.Github Actions provide a lot of templates,based on various purposes, and they’re pretty handy and helpful.TDDIn TDD, tests are written before we code. We keep coding to make the program pass more tests.I can give you an example of how I used TDD. One of the key features of our app is it first asks user to define their data contract. After that, every time the user test their API, we check if the request follows the data contract.First, I converted the requirements into some unit tests. Let’s say, in the data contract, for the POST request sent to /users, the request body must contain a field username, which is a string; and a field hobbies, which is an array. For example, the app should return an error message if usernameturns out to be a number in the request body. The test should return passed if it is a string.The first time I run the tests, they were expected to return failed for most cases, because no functionality has been added.Then I implemented some functions to check strings. After that, the string tests should all pass, while others still failed.Then I implemented functions to check arrays. After that, more test cases should pass.I did it again and again until all of them got a pass.Page ObjectPage object is a design pattern for enhancing test maintenance and reducing code duplication.A page object is an object-oriented class that serves as an interface to a page. The tests use the methods of this page object class when they need to interact with the UI of that page.If the UI changes, the tests themselves don’t need to change, only the code within the page object needs to change.Cucumber BDD BDD is a development approach that involves the use of common language to enhance the communication between tech and non-tech teams. Tests are more user-focused and based on the system’s behavior. “Given-When-Then” is a proposed way of writing tests. Precondition- Action- Outcome. Gherkin Gherkin is a set of rules to make plain text structured enough so Cucumber can understand. When we do BDD, we use concrete examples to specify what we want the software to do. Selenium Selenium is the tool to design web automation tests, and cucumber helps to design framework (run and maintain) of Selenium tests. Scenarios In Cucumber, test cases are represented as scenarios. A scenario, is a concrete example illustrating how the software should behave. Scenarios contain steps which are equivalent to test steps, and use Gherkin keywords to denote them: Given, When, Then, But, And. Feature and Feature File Feature represents business requirement. Feature file acts as a test suite which consists of all scenarios. " }, { "title": "FINRA Interview Preparation", "url": "/posts/Finra_testing_interview/", "categories": "Interviews", "tags": "", "date": "2022-09-03 00:00:00 -0500", "snippet": "Selenium Questions1. Challenges with Selenium No support for non-web automation Timeout or Sync issues Test execution slowness in IE Limited reporting2. New Selenium 4 features webdriver Selenium IDE support for Chrome Selenium grid Taking screenshots at the element level, section level and page level Support of relative locators3. WebDriver.findElement() vs WebElement.findElement() driver is finding the element from the entire page webelement is searching in itself and its children4. Page object model vs Page factoryBoth are Selenium design pattern.POM is a repository where we store all the webElements. If UI changes, we update WebElements to Page class in POM.PF is similar to POM, the difference is the way we define locators.5. Locators supported ID CSS Selector: tags and attributes XPath: Search in the DOM, reliable but slow Name: same as ID, but it is not unique Classname TagName LinkText Partial LinkText6. StaleElementReferenceExceptionYou grab webElements in a page, and then go to another page, then all these elements would be stale (outdated). Even you come back again to this page, they cannot be used.7. Difference between XPath and CSS Selector XPaths is slower XPath supports text, while CSS Selector cannot XPath can move in both forward and backward, while CSS Selector can only move forwardAPI Testing1. Challenges under API testing API documentation data contracts Access to DB when API is from third party, their database details are not shared. Authorization overhead authorization and authentication involved 2. Difference between PUT and POST methods POST: Creating new objects on the server PUT: Update the object in server with new value3. Authentication techniques used in APIs Session/ Cookie based authentication Basic authentication username + password Digest authentication A hash of the credentials is sent over the wire. OAuth 4. What is REST APIRepresentational State Transfer. It is a set of functions helping developers in performing requests and receive responses. Interactions are made through HTTP Protocol.5. What needs to verify in API testing the accuracy of the data HTTP status code error codes response time non-functional testing such as performance testing and security testing" }, { "title": "AWS Certified Cloud Practitioner Exam", "url": "/posts/AWS_practitioner/", "categories": "Devops", "tags": "AWS", "date": "2022-09-03 00:00:00 -0500", "snippet": "CloudFront 是内容传播AWS 可以降低运营成本，变化快（不需要更换设备等）迁移到 AWS serverless 表现更好AWS organizations 可以允许共享账号和 reserved instancesAvailability Zone 由离散的数据中心，且数据中心有冗余的算力、网络等AMI/ snapshots 都是备份EC2 的购买选项： On demand: 随要随用，无折扣 类比：临时出去玩住酒店 Reserved: 对需求清楚明确，提前预定需要的服务，享受折扣 类比：提前预定圣诞节要住的房间 Saving Plans: 对服务内容不是特别固定，但是有保底消费金额 类比：可在套房、海景房自由切换，但是消费金额不得小于 x Spot Instances: 竞拍闲置的资源，有低价的就用，涨价了就不用 类比：淡季出行 Dedicated Hosts: 包场 Capacity Reservations: 租制定的房间一整年，就算今天不住也掏钱AWS Lambda 由数据的变化或系统状态的变化触发AWS SDKs 允许用户程序化地部署云服务Cost Allocation Tags 可以查看哪个部分在用哪个 AWS 资源AWS Consulting Partners 帮助客户提供设计、构造、迁移和管理 AWS 的意见。AWS Managed Services 提供优化服务的意见。Service Quotas 跟踪服务极限的增长。AWS Artifact 提供 AWS 的 ISO 认证，下载相关的安全和协议报告。更改 AWS support plan 需要根用户权限。AWS Simple Queue Service（SQS)每秒可处理 1 - 10,000 条消息VPC 可以拓展到同一个 region 下的所有 AZAWS site-to-site VPN 由 virtual private gateway 和 customer gateway 组成。连接在不同 region 的 VPC 可以用 VPC peering。AWS WAF 是 stateless，可以防范 DDoS 攻击。AWS Shield 也可以防范，但是功能仅此而已。对于 EC2 来说，Security group 起到了防火墙的作用。AWS Enterprise support：24/7 technical account manager/ support of third-party software integration to AWS/ 15 min response time.AWS developer support: business hoursAWS Organizations 用 Service control policies（SCP）来控制权限。AWS Service Catalog 可以控制员工访问资源的权限。ACL 是 stateless，按顺序处理 rules，从最小数字的 rule 开始。Direct Connect 能提供 on-premises 和 AWS 之间的连接。PrivateLink 是在 AWS 内部提供连接。Amazon Macie 使用 Machine Learning 帮助发现 S3 中的敏感数据。AWS Global Accelerator 可以提高 availability 和 performance。AWS IAM Access Analyzer 可以识别与外界共享的 S3 和 IAM role。AWS Transit Gateway 连接并管理不同区域的 VPC。相比于 VPX peering, Transit Gateway 更适合很多的 VPC。Cost Explorer 查看账单，支持数据可视化Amazon QuickSight 是数据可视化工具，可以提供 interactive dashboards。 Amazon Athena 用来分析 S3 中的数据。实时分析用户数据需要 Kinesis Data Analytics。Amazon CloudWatch 检测 EC2 的 CPU 和网络使用情况。AWS Trusted Advisor 监控套餐使用量。AWS CloudTrail 找到用户访问 console 和用户发送 request 的记录。infrastructure-as-code(IaC) –&gt; AWS CloudFormationAWS Local Zones 把 AWS 部署在大城市，降低延迟。AppStream 允许用户即时在任意地点，访问特定的 desktop applications。Amazon Workspace 允许用户在个人设备上访问公司桌面。GuardDuty 可以实现威胁监测。Amazon Inspector 发现 EC2 中的弱点和漏洞。Fargate 是 serverless。Snowball Edge 把数据传送到 AWS。AWS Key Management Service (AWS KMS)在空闲时对数据进行加密。AWS Pricing Calculator 预估未来收费。on-prem 和 AWS 之间的连接用 Direct Connect 和 VPN。Outposts: on-prem 和 AWS 的 hybridAWS Storage Gateway 提供 on-prem 和 AWS 的 hybrid 的备份。对于频繁改动的数据： EFS + RDS。CloudFront 和 Wavelength 利用了 global edge locations。Operational Excellence:小步迭代Security group 是在 instance level，Network Access Control List(ACL)是在 subnet level。Traceability 带来了安全。Redshift: 分析 PB 级别的数据.Route 53: Highly available and scalable DNS web service。AWS Systems Manager Session Manager 是除 SSH 外另一种登录 EC2 的方式。Rekognition 分析照片，Comprehend 分析文本背后的内容， Textract 识别图片形式的文本。S3 Standard-Infrequent Access (S3 Standard-IA)适合不常访问的内容，且无法被再创造的数据。S3 One Zone-IA 要求数据 re-createable。AWS Compliance Program 可以帮助用户决定符合地区法规要求的服务。Amazon Cognito 身份管理，设置用户登录。AWS X-Ray 提供端对端表现评估。AWS Glue 用于 ETL。AWS CodeCommit 提供 private version control system。CodeStar 提供 CI/CD。CodeGuru 提供代码质量建议。预估未来 AWS 用量： Cost Explorer; 预估项目中的未来数据： Amazon Forecast。想使用 licensing physical cores 的软件，则用 dedicated host。AWS compute services: Lightsail 和 Batch。" }, { "title": "Python Async Programming", "url": "/posts/python_Async_Programming/", "categories": "Foundamentals", "tags": "Python, Async", "date": "2022-09-01 00:00:00 -0500", "snippet": "Synchronous ProgrammingEach statement in your code is executed one after the other. This means each statement has to wait for the previous one to finish.Asynchronous ProgrammingAsynchrony, refers to the occurence of events indepentent of the main program flow.It is different from Multi-processing. Say we have two functions, in multi-processing, we can have these functions running at the same time. While Async programming just allow us to execute function1 first, and if function1 is now waiting for something, being idle, then we can do something for function2 until function1 needs the computing power again.CoroutinesCoroutines are computer program components that generalize subroutines for non-preemptive multitasking, by allowing execution to be suspended and resumed.AsyncWhen you add the async keyword in front of a function’s definition, it’s actually creating a wrapper around this function. It will return a coroutine object, which is just like an object, and can be executed.Async Event-LoopThe event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program.In python, we can use asyncio.create_task() to create a task. For a task, it will be added to the event loop. For the tasks in the event loop, they will only be executed when the main function is being idle, or is done, or the main function is waiting the result of this task (by using the await keyword). In case of main function has ended, while the task is waiting for something, the program will terminate without waiting for the task.example 1.1import asyncioasync def main(): task = asyncio.create_task(other_function()) print(\"A\") print(\"B\")async def other_function(): print(\"1\") await asyncio.sleep(2) print(\"2\")asyncio.run(main())The output would be “A” – “B” – “1”.example 1.2import asyncioasync def main(): task = asyncio.create_task(other_function()) print(\"A\") await asyncio.sleep(1) print(\"B\")async def other_function(): print(\"1\") await asyncio.sleep(2) print(\"2\")asyncio.run(main())The output would be “A” – “1”, waiting 1s, – “B”.example 2import asyncioasync def main(): print(\"hello\") await foo(\"text\") print(\"finished\")async def foo(text): print(text) # put await in front of a coroutine to execute it await asyncio.sleep(1)# adding the invocation of main to the event loopasyncio.run(main())In the example above, python would print out ‘hello’, then ‘text’, wait for 1s, then print ‘finished’. The total time cost would be around 1.3s.example 3import asyncioasync def main(): print(\"hello\") task = asyncio.create_task(foo(\"text\")) print(\"finished\")async def foo(text): print(text) await asyncio.sleep(1)asyncio.run(main())In the example above, python would print out ‘hello’, then ‘finished’, then ‘text’. The total time cost would be around 0.3s.example 4import asyncioasync def main(): print(\"hello\") task = asyncio.create_task(foo(\"text\")) await task print(\"finished\")async def foo(text): print(text) await asyncio.sleep(1)asyncio.run(main())In the example above, python would print out ‘hello’, then ‘text’, wait for 1s, then print ‘finished’. The total time cost would be around 1.3s. Same as example 1.example 5import asyncioasync def main(): print(\"hello\") task = asyncio.create_task(foo(\"text\")) await asyncio.sleep(1) print(\"finished\")async def foo(text): print(text) await asyncio.sleep(10)asyncio.run(main())In the example above, python would print out ‘hello’, then ‘text’, wait for 1s, then print ‘finished’. The total time cost would be around 1.3s.example 6async def fetch_data(): print('start fetching') await asyncio.sleep(2) print('done fetching') return {'data': 1}async def print_numbers(): for i in range(10): print(i) await asyncio.sleep(0.5)async def main(): task1 = asyncio.create_task(fetch_data()) task2 = asyncio.create_task(print_numbers()) value = await task1 print(value)asyncio.run(main())The output would be “start fetching”, “0–1–2–3”, “done fetch” and {‘data’: 1}.The reason is, first we execute fetch_data, then it will sleep for 2s. So the program will find something else to do, thus move to the creation and execution of task2. Inside task2, we are asked to sleep 0.5s, so the program will find something else to do, but await task1 says, you can’t go down any more, let’s wait task1 to finish. Once task1 is done, we are able to go down and find some code to execute during each 0.5s sleep. So we print value and come to the end of the main function. The rest of task2 will not be executed, because we are not told to wait for it.example 7async def fetch_data(): print('start fetching') await asyncio.sleep(2) print('done fetching') return {'data': 1}async def print_numbers(): for i in range(10): print(i) await asyncio.sleep(0.5)async def main(): task1 = asyncio.create_task(fetch_data()) value = await task1 task2 = asyncio.create_task(print_numbers()) print(value)asyncio.run(main())The output would be “start fetching”, waiting 2s, “done fetch” and {‘data’: 1}, and “0”.The reason is, first we execute fetch_data, it prints out “start fetching”, then it will sleep for 2s. So the program will find something else to do (go to next line). However, here we are told to wait task1 to be finished. So we wait here, doing nothing else, until it is totally finished. Then we move to task2, print the first number, then sleep. During this sleep, we go down and print the value, and come to the end of main function, leading to the finish of this program." }, { "title": "BQ Interview Tips", "url": "/posts/BQ_Interview/", "categories": "SoftSkills", "tags": "Interview", "date": "2022-08-18 00:00:00 -0500", "snippet": " Don’t Get Down-Leveled or How to Tell a Good Story (From a Principal at Amazon) You have to do well in both technical and behavioral parts. A downlevel can happen if you fall into the light green part.interview performance results The STAR strategy is not a good choice for you to describe a character, although it’s good for describing what happened. The Man in the hole is a better tactic. In addition, we need to find the requirements from job description and expections of the company, and then anchor these to your stories. Summary: Levels are relative. Get some information from glassdoor and FYI. Poor Behavioral responses lead to down-leveling. If you didn’t do well in the technical part, they wouldn’t give you an offer at all. Use U-story shape Imperfect but positive success Use STAR to check Don’t lie " }, { "title": "Python Basic Concepts", "url": "/posts/python_concepts/", "categories": "Foundamentals", "tags": "Python", "date": "2022-08-17 00:00:00 -0500", "snippet": "Reference:https://www.interviewbit.com/python-interview-questions/#pandas-in-pythonstatic vs dynamic languages Static: Data types are checked before execution Dynamic: Data types are checked during executionstrongly vs weakly typed languages Strongly-typed: “1” + 2 will result in type error. Don’t allow type-coercion Weakly-typed: “1” + 2 -&gt; “12”scope in python local scope: available in the current function global scope: available throughout the code execution since their inceptioninit__init__ is a constructor method in Python, and is automatically called to allocate memory when a new object/instance is created. All classes have a __init__ method associated with them.decoratorsDecorators are essentially functions that add functionality to an existing function, without changing the structure of the function itself. They are represented the @decorator_name in Python and are called in a bottom-up fashion. For example:# decorator function to convert to lowercasedef lowercase_decorator(function): def wrapper(): func = function() string_lowercase = func.lower() return string_lowercase return wrapper# decorator function to split wordsdef splitter_decorator(function): def wrapper(): func = function() string_split = func.split() return string_split return wrapper@splitter_decorator # this is executed next@lowercase_decorator # this is executed firstdef hello(): return 'Hello World'hello() # output =&gt; [ 'hello' , 'world' ]lambdaLambda is an anonymous function in Python, that can accept any number of arguments, but can only have a single expression." }, { "title": "IoT", "url": "/posts/iot_basics/", "categories": "Foundamentals", "tags": "IOT", "date": "2022-07-27 00:00:00 -0500", "snippet": "A smart home is the best example of IoT.In the context of IoT devices, hardwares can be divided into general devices and sensing devices. Home appliances are classic examples of general devices. Sensing devices can measure temperature, humidity and light intensity.These devices are connected to the internet with the help of gateways. These gateways, or processing nodes process the information collected and transfer it to the cloud.The cloud can also generate a report and send it to the app.IoT Device Architecture IoT devices IoT Gateway or Aggregation Layer Processing Engine or Event Processing Layer Application Layer or API Management LayerIoT Design Considerations wireless capability functionality interoperability secure storage bandwidththe Role of Cloudcloud sloves the problem of scalability.In the infrastructure level, it reduces the upfront investment.Example:Log and view data in the cloud with the help of AWS Dynamo DB.We set up a rule to trigger a lambda function to put the MQTT message into the Dynamo table.Then in EC2 Web Server, we program a simple web interface to scan the table and present the data.The great thing about Dynamo DB is that it’s a lot easier to work with than traditional SQL tables and works well with IoT type messages like MQTT.References:https://www.youtube.com/watch?v=242Pkw0zngw" }, { "title": "Web Basic Concepts", "url": "/posts/restful/", "categories": "Foundamentals", "tags": "Web, REST", "date": "2022-07-27 00:00:00 -0500", "snippet": "HTTPHypertext Transfer ProtocolHTTP is an application layer protocol for sending and receiving messages over a network.It is a TCP/IP based protocal, and it is used to deliever contents, for example, images, videos, documents, .etc.You can think it as the messenger of the web.Three important things about HTTP: Connectionless: after making the request, the client disconnect from the server, then when the response is ready, the server re-establish the connection again and deliver the response. Can deliver any sort of data, as long as the two computers can read it. Stateless. The client and server know about each other just during the current request. If it closes and they want to connect again, they need to provide information to each other again, and the connection is handled as the very first one.A typical HTTP message includes three parts: Start lineRequest: method, URI, HTTP versionResponse: HTTP version, status code Headers: name-value pairs Body.URI, URL, URNURI (Uniform Resource Identifier)It is a string of characters used to identify a resource on the internet either by location or by name, or both.It’s kinda like identify a person via his name or living address. Cody Wilson2500 Alma StURL (Uniform Resource Locator)It is a string of characters but it just refers to the address.It’s the most used way to locate resources on the web. 2500 Alma StRequired components: the protocol the domainOptional components: the path the port query strings and fragmentsURN (Uniform Resource Name)It is a string of characters but it just refers to the address. Cody WilsonIt is ineffective because resources can have the same name.RelationshipURL and URN are a subset of URI by definition.Web ServicesWeb services are a set of rules and technologies that enable two or more components on the web to talk to each others.A web service is defined by rules like: How software components will talk? What kind of messages they will send to each other? How requests and responses will be handled?APIApplication Programming Interface.An API is a way to let software components to talk to each other.It can be in anything in any form. The only thing it has to be is that it has to be a way to communicate with a software component.For example, it can be attributes and methods in an object. An other form is the command-line interface in an operating system.Based on the definition of web services, we can find web services are just APIs.So REST API = REST web serviceRESTRepresentational State TransferIn REST, everything that a client can operate on is called their resource.How does HTTP relate to REST? HTTP is an application layer protocal for sending and receiving messages over a network. In HTTP, we can use GET method for all sorts of interactions. REST is a way to implement HTTP, it dictates how distributed systems on the web should communicate.How does the Web relate to REST? REST is the underlying architecture of the Web.Questions every API should answer How can the client tell the service provider which operation it wants to perform? (Method Information)REST answer: The method information should be expressed in the HTTP verb.Not RESTful: GET api/users/delete/:useridRESTful: DELETE api/users/:userid How can the client tell the service provider what data to operate on? (Scoping information)REST answer: The scoping information should go in the URI.REST APIwhyIt can help the team form a consensus, reduce chaos due to personal habits.characteristics It uses HTTP methods suitably (GET for getting data, POST for creating…) Scoping Information (and other data) goes in the parameters part of URI It uses common data formats (most commonly JSON) Communication is stateless (the server doesn’t maintain the state of the client)some rules use nouns not verbs Don’ts: /getAllEpics//getAllFinishedEpics//createEpic//updateEpic/ Dos: GET /epics/GET /epics?state=finished/POST /epics/PUT /epics/5/ two levels to describe the same resources /epics/epics/5 use nouns in plural formGET /stories/ return the actual data under the key “data” {\"data\": {\"id\": 1, \"name\": \"cody\"}} use query strings for all the optional or complex paramsReferences:https://www.youtube.com/playlist?list=PLSyLGd0D0b4RNjrUtbGAG1ejmEv1ZF5Ma" }, { "title": "OOD Concepts", "url": "/posts/OOD_concepts/", "categories": "Foundamentals", "tags": "OOD", "date": "2022-07-26 00:00:00 -0500", "snippet": "Encapsulation" }, { "title": "JavaScript Concepts", "url": "/posts/JavaScript_concepts/", "categories": "Frontend", "tags": "JavaScript", "date": "2022-06-28 12:00:00 -0500", "snippet": "The code written with arrow functions looks compact. Functions are easier to write and read. One of the reasons is an implicit return by simply omitting the curly braces.Arrow syntax doesn’t contain its context and automatically bind this to the surrounding code’s contextIf you work with global scope and Object.prototype properties use function.If you work with object constructors use class.If you face any other situation use arrow function." }, { "title": "React Concepts", "url": "/posts/React_concepts/", "categories": "Frontend", "tags": "React", "date": "2022-06-07 12:00:00 -0500", "snippet": "1. What’s ReactReact is an open-source front-end JavaScript library that is used for building user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps. So it’s good at handling the page rendering in response to the change of data. However, it’s not good at passing values among components, and that’s why we need Redux to assist development.2. Major features of React JSX(JavaScript Syntax Extension)JSX is a combination of HTML and JavaScript. You can embed JavaScript objects inside the HTML elements.JSX makes codes easy and understandable. It is easy to learn if you know HTML and JavaScript. Virtual DOMIt uses VirtualDOM instead of RealDOM, considering that RealDOM manipulations are expensive. One-way data flowFollows Uni-directional data flow or data binding. ComponentsReact is component-based and it divides the web page into multiple components. Each component is a part of the UI design which has its own logic and design, so it runs faster and can be reusable.3. VirtualDOMUsually, JavaScript Frameworks updates the whole DOM at once, which makes the web application slow.But react uses virtual DOM which is a JS object to descirbe the real DOM.ReconciliationWhenever there is a modification in the web application, the whole virtual DOM is updated first and finds the difference between real DOM and Virtual DOM.Once it finds the difference, then DOM updates only the part that has changed recently and everything remains the same.Diffing AlgorithmTwo assumptions: Two elements of different types will produce different trees. The developer can hint at which child elements may be stable across different renders with a key prop.Compare the root element. If they’re different types, then discard the old tree and build a new one. If they’re the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes.The key prop can help compare faster. You can pass an item’s index in the array as a key. This can work well if the items are never reordered, but reorders will be slow.Benefits Better performance. The cost of creating JS objects is much less than creating a DOM. Comparing JS objects is also faster. Cross-platform applications. For native apps, there is no DOM. But they can read virtual DOM, and convert them into components.DOMDocument Object Model. It’s a language independent interface. It treats HTML/XML document as a tree.4. Data flow in ReactReact implements one-way data flow using props, from top to bottom. Parents can pass values to children, while children cannot return value to parents. If we still need to change it in the child component, then we need to pass parent’s method which can change the value to the child, and invoke that method in the child component.This keeps everything modular and fast. It’s also easier to read and debug. Because in the two-way mode, it’s usually not easy to know which child is changing the value.5. Lifecycle methodsDetailsLifecycle of Components6. Server Side Rendering Vs Client Side RenderingThe main difference is that for SSR your service response to the browser is the HTML of your page that is ready to be rendered,while for CSR the browser gets a pretty empty documents which links to your javaScript.   SSR CSR Pros - Search engines can crawl the site for better SEO- The initial page load is faster- Great for static sites. - Rich site interactions- Fast website rendering after the initial load- Great for web applications - Robust selection of JavaScript libraries Cons - Frequent server requests- An overall slow page rendering- Full page reloads- Non-rich site interactions - Low SEO if not implemented correctly- Initial load might require more time- In most cases, requires an external library 7. Functional vs Class components Syntax. Just like in their names, a functional component is just a plain JavaScript function that returns JSX. A class component is a JavaScript class that extends React.Component which has a render method. They are called stateless function components because they just take props as an argument and return a react element. They don’t manage state and don’t have a lifecycle, while class components do. The major difference is the syntax. It relates to the way we declare components, pass props, handling states, manage lifecycle. Function components capture the props and state by default. It is not a bug, but a feature of functional components. Functional components require less code to write an equal component. However, that doesn’t mean that functional components more readable and convenient to use. If a developer is used to work with object-oriented programming, he finds using class components much more comfortable. Those who are used to functional programming like functional components more than class components." }, { "title": "Trie", "url": "/posts/Trie/", "categories": "Leetcode", "tags": "Trie", "date": "2022-06-01 00:00:00 -0500", "snippet": " 208. Implement Trie (Prefix Tree) Basic Trie construction. The most common way to use a Trie. Have a TrieNode class and a Trie class. 1804. Implement Trie II (Prefix Tree) Two kinds of solution. Can only have a Trie class, so each node will have access to all the methods, enabling we call a method recursively. Or stick to the two classes way, but need to add a start_with property to the TrieNode class to have it store more information. 648. Replace Words Application of Trie. 211. Design Add and Search Words Data Structure Harder application. Have to call the method recursively, so use one class only. 677. Map Sum Pairs Harder application. Have to call the method recursively, so use one class only. why we need Trie?Although hash table has O(1) time complexity for looking for a key, it is not efficient in the following operations : Finding all keys with a common prefix. Enumerating a dataset of strings in lexicographical order.Another reason why trie outperforms hash table, is that as hash table increases in size, there are lots of hash collisions and the search time complexity could deteriorate to O(n), where n is the number of keys inserted.Trie could use less space compared to Hash Table when storing many keys with the same prefix. In this case using trie has only O(m) time complexity, where m is the key length.Searching for a key in a balanced tree costs O(mlogn) time complexity." }, { "title": "DFS", "url": "/posts/DFS/", "categories": "Leetcode", "tags": "DFS", "date": "2021-08-21 00:00:00 -0500", "snippet": " 257. Binary Tree Paths" }, { "title": "Interview Tips", "url": "/posts/Django_learning/", "categories": "Backend", "tags": "Django", "date": "2021-08-18 00:00:00 -0500", "snippet": "Create a project$ django-admin startproject mysiteRun the server$ python manage.py runserverVisithttp://127.0.0.1:8000/Create an app What’s the difference between a project and an app? An app is a web application that does something – e.g., a blog system, a database of public records or a small poll app. A project is a collection of configuration and apps for a particular website. A project can contain multiple apps. An app can be in multiple projects.$ python manage.py startapp pollsCreate tables for the pre-installed apps$ python manage.py migrateDefine tables in the model.py under the app folderIn polls/model.py:from django.db import modelsclass Question(models.Model): question_text = models.CharField(max_length=200) pub_date = models.DateTimeField('date published')class Choice(models.Model): question = models.ForeignKey(Question, on_delete=models.CASCADE) choice_text = models.CharField(max_length=200) votes = models.IntegerField(default=0)Activate the model Include the app in the projectIn mysite/settings.py, add 'polls.apps.PollsConfig' into INSTALLED_APPS Save the changes to models as a migration Migrations are how Django stores changes to your models (and thus your database schema) - they’re files on disk. $ python manage.py makemigrations polls Check the corresponding SQL commands for a migration (Optional) $ python manage.py sqlmigrate polls 0001 Synchronize the changes $ python manage.py migrate Steps to make model changes Change your models (in models.py). Run python manage.py makemigrations to create migrations for those changes Run python manage.py migrate to apply those changes to the database.Create admin$ python manage.py createsuperuser" } ]
